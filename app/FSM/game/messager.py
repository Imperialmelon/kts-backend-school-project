import typing

from sqlalchemy import Sequence

from app.utils.keyboard import (
    get_available_stocks_keyboard,
    get_options_keyboard,
    get_participation_keyboard,
    get_player_assets_keyboard,
    get_selling_keyboard,
)

if typing.TYPE_CHECKING:
    from app.web.app import Application

from app.store.database.models import Asset, UserInGame


class GameMessenger:
    @staticmethod
    async def send_options_keyboard(
        app: "Application", chat_id: int, player_id: int, session_id: int
    ) -> typing.NoReturn:
        user = await app.tg_accessor.get_user_by_custom_id(player_id)
        keyboard = get_options_keyboard(player_id, session_id)
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
        )

    @staticmethod
    async def send_available_stocks_keyboard(
        app: "Application",
        chat_id: int,
        session_id: int,
        assets: typing.Sequence[typing.Any],
    ) -> typing.NoReturn:
        keyboard = await get_available_stocks_keyboard(app, assets, session_id)
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:",
            reply_markup=keyboard,
        )

    @staticmethod
    async def send_participation_keyboard(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        keyboard = get_participation_keyboard()
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ:",
            reply_markup=keyboard,
        )

    @staticmethod
    async def session_start_informer(
        app: "Application",
        chat_id: int,
        players_list: str,
        player_associations: Sequence[UserInGame],
        session_num: int,
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=(
                f"–°–µ—Å—Å–∏—è {session_num} –Ω–∞—á–∞—Ç–∞!\n\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∏—Ö –±–∞–ª–∞–Ω—Å—ã:\n"
                f"{players_list}"
            ),
        )

    @staticmethod
    async def unknown_command_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        )

    @staticmethod
    async def successful_purchase_message(
        app: "Application", chat_id: int, asset_title: str, player_name: str
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–ò–≥—Ä–æ–∫ {player_name} –ø—Ä–∏–æ–±—Ä–µ–ª {asset_title}",
        )

    @staticmethod
    async def players_list_message(
        app: "Application", chat_id: int, players: Sequence[UserInGame]
    ) -> typing.NoReturn:
        player_list = "\n".join(
            [f"‚Ä¢ {player.first_name}" for player in players]
        )
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏:\n{player_list}",
        )

    @staticmethod
    async def not_enough_players_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã",
        )

    @staticmethod
    async def successful_participation_message(
        app: "Application", chat_id: int, player_name: str, callback_query
    ) -> typing.NoReturn:
        await app.tg_client.answer_callback_query(
            callback_query_id=callback_query.id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {player_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ",
        )

    @staticmethod
    async def player_already_participating_message(
        app: "Application", chat_id: int, player_name: str
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"{player_name}, –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
        )

    @staticmethod
    async def cancel_participation_message(
        app: "Application", chat_id: int, player_name: str
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {player_name} –æ—Ç–º–µ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ",
        )

    @staticmethod
    async def no_available_assets_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤",
        )

    @staticmethod
    async def no_player_found_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    @staticmethod
    async def player_has_no_assets_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id, text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤"
        )

    @staticmethod
    async def player_assets_message(
        app: "Application",
        chat_id: int,
        assets: list[tuple[Asset, int]],
        session_id: int,
        player_id: int,
        balance: int,
    ) -> typing.NoReturn:
        user = await app.tg_accessor.get_user_by_custom_id(player_id)
        keyboard = get_player_assets_keyboard(assets, session_id)

        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"{user.first_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∏ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã:",
            reply_markup=keyboard,
        )

    @staticmethod
    async def selling_menu_message(
        app: "Application",
        chat_id: int,
        asset: Asset,
        session_id: int,
        price: int,
    ) -> typing.NoReturn:
        keyboard = get_selling_keyboard(asset.id, session_id)

        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"{asset.title}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}",
            reply_markup=keyboard,
        )

    @staticmethod
    async def game_killed_message_(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.store.tg_api.tg_client.send_message(
            chat_id=chat_id,
            text="–ò–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–∫–æ–Ω—á–µ–Ω–∞",
        )

    @staticmethod
    async def starting_timer_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω",
        )

    @staticmethod
    async def game_already_going_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞",
        )

    @staticmethod
    async def insufficient_funds_message(
        app: "Application", chat_id: int, player_id: int
    ) -> typing.NoReturn:
        user = await app.game_accessor.get_user_by_player_id(player_id)
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"{user.first_name}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
        )

    @staticmethod
    async def not_your_assets_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–≠—Ç–æ –Ω–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã",
        )

    @staticmethod
    async def successful_sale_message(
        app: "Application", chat_id: int, asset_title: str, player_name: str
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–ò–≥—Ä–æ–∫ {player_name} –ø—Ä–æ–¥–∞–ª {asset_title} üêä",
        )

    @staticmethod
    async def no_active_for_sale_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–ê–∫—Ç–∏–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        )

    @staticmethod
    async def player_eliminated_message(
        app: "Application", chat_id: int, player_name: str
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–ò–≥—Ä–æ–∫ {player_name} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã",
        )

    @staticmethod
    async def game_over_message(
        app: "Application", chat_id: int, winner_name: str
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name} üòéüéâü•≥",
        )

    @staticmethod
    async def session_already_finished_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text="–°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        )

    @staticmethod
    async def rules_message(
        app: "Application", chat_id: int
    ) -> typing.NoReturn:
        rules_text = """
    üìà –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "–ë–∏—Ä–∂–∞" üìâ

    –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–≥—Ä—É, –≥–¥–µ –Ω—É–∂–Ω–æ –≥—Ä–∞–º–æ—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏.

    üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    - –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Å—Å–∏–π
    - –ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    - –í–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ:
    ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
    ‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –∞–∫—Ç–∏–≤—ã

    üíπ –ú–µ—Ö–∞–Ω–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:
    - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ –º–µ–Ω—è–µ—Ç—Å—è
    - –í–∞—à–∏ –∞–∫—Ç–∏–≤—ã –º–æ–≥—É—Ç –∫–∞–∫ –≤—ã—Ä–∞—Å—Ç–∏, —Ç–∞–∫ –∏ —É–ø–∞—Å—Ç—å –≤ —Ü–µ–Ω–µ
    - –ù—É–∂–Ω–æ —É—Å–ø–µ—Ç—å –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤—ã –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!

    üö´ –í—ã–±—ã–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:
    - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
    (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)
    - –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –≤—ã–±—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä–∫–æ–π
    - –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—Ç—Å—è 1 –∏–≥—Ä–æ–∫ - –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è

    üèÜ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:
    –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞:
    1. –û—Å—Ç–∞—ë—Ç—Å—è –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ - –æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç
    2. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π - –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    (–∞–∫—Ç–∏–≤—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è)

    üí∞ –°–æ–≤–µ—Ç: –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω –∏ –≤–æ–≤—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å!
    """
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=rules_text,
        )

    @staticmethod
    async def participation_timer_start(
        app: "Application", chat_id: int, timer: int
    ) -> typing.NoReturn:
        text = f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {timer} —Å–µ–∫—É–Ω–¥:"
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=text,
        )

    @staticmethod
    async def session_timer_start(
        app: "Application", chat_id: int, timer: int
    ) -> typing.NoReturn:
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {timer} —Å–µ–∫—É–Ω–¥",
        )

    @staticmethod
    async def session_end_message(
        app: "Application",
        chat_id: int,
        sorted_players: Sequence[UserInGame],
        session_num: int,
    ) -> typing.NoReturn:
        player_list = "\n".join(
            [
                f"‚Ä¢ {player.user.first_name} : {player.cur_balance:.0f}"
                for player in sorted_players
            ]
        )
        text = f"–°–µ—Å—Å–∏—è {session_num} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å."
        f"\n\n–ò–≥—Ä–æ–∫–∏ –∏ –∏—Ö –±–∞–ª–∞–Ω—Å—ã:\n\n{player_list}"
        await app.tg_client.send_message(
            chat_id=chat_id,
            text=text,
        )
